#!/usr/bin/perl

use strict;

#*CORE::GLOBAL::die = sub { require Carp; Carp::confess(); };
#$SIG{__WARN__} = sub { require Carp; Carp::confess(); };

use ComposerCat::Ingestion qw(create_workbook ingest_workbook);
use HTML::Template;
#use Apache2::FakeRequest;
use ComposerCat::API qw(handler make_api_function);
use ComposerCat::Database qw(make_dbh all_records table_info insert_record insert_resource);
use ComposerCat::Resources qw(dbpedia_uri);
use ComposerCat::Search qw(process_all_pages);
use ComposerCat::Digitisations qw(mime_type render);
use Data::Dumper;

$Data::Dumper::Indent = 1;
$Data::Dumper::Terse = 1;

sub test_create_workbook {
    create_workbook({works => [1,2,3,4,5]});
}

sub test_ingest_workbook {
    ingest_workbook("../../test16.xlsx");
}

sub test_editor_front_page {
    make_dbh;

    my $template = HTML::Template->new(filename => "../web/editor/new_session.tmpl", global_vars => 1);

    # my $params = {tables => [{table_name => 'works',
    # 			      columns => [{column => 'ID'}, {column => 'uniform_title'}],
    # 			      records => [{ID => '1', fields => [{value => '1'}, {value => 'Helllo'}]}]},
    # 			     {table_name => 'dates',
    # 			      columns => [{column => 'ID'}, {column => 'year'}],
    # 			      records => [{ID => '16', fields => [{value => '16'}, {value => '1927'}]}]}]};

    # $template->param($params);
 
    my $field_order = [@{ table_info('works')->{_field_order} }];
    my $columns = [map { {column => $_}; } @$field_order];

    print Dumper($columns);
    print "\n\n";

    my $records = [];

    foreach my $work (@{ ComposerCat::Database::list_works() }) {
	my $fields = [];
	foreach my $fn (@$field_order) {
	    push @$fields, {value => $work->{$fn}};
	}

	push @$records, {ID => $work->{ID},
			#fields => map { {value => $work->{$_}}; } @{ table_info('works')->{_field_order} }};
			fields => $fields};
    }
    #my $_records = Database::list_works();
    #my @records = map { {ID => $_->{ID}, fields => map { {value => $_}; } @{ table_info('works')->{_field_order} } }; } @{ Database::list_works() };

    #print Dumper(@records);

    #for my $rec (@records) {
	#print Dumper($rec) . "\n";
	#print $rec->{ID} . "\n";
	#print Dumper($rec->{fields}) . "\n";
    #}

    my $param = {tables => [{table_name => 'works',
			     columns => $columns,
			     records => $records}]};
    print Dumper($param);
    print "\n\n";

    $template->param($param);
    print $template->output();
}

sub test_handler {
    my $r = Apache2::FakeRequest->new(hostname => 'localhost');
    handler($r);
}

sub test_database_autoloader {
    make_dbh;

    print 'ComposerCat::Database::work(1):'; print "\n";
    my $work_1 = ComposerCat::Database::work(1);
    print Dumper($work_1) . "\n";

    print 'ComposerCat::Database::list_works():'; print "\n";
    my $works = ComposerCat::Database::list_works();
    print scalar @$works . "\n";
    foreach my $work (@$works) {
	print $work->{uniform_title} . "\n";
    }

    print 'ComposerCat::Database::list("works"):'; print "\n";
    my $works = ComposerCat::Database::list("works");
    print scalar @$works . "\n";
    foreach my $work (@$works) {
	print $work->{uniform_title} . "\n";
    }

    my $musical_information_1 = ComposerCat::Database::musical_information(1);
    print Dumper($musical_information_1) . "\n";

    my $musical_information = ComposerCat::Database::list_musical_information();
    print scalar @$musical_information . "\n";
    foreach my $musical_information (@$musical_information) {
	print $musical_information->{work_id} . "\n";
    }

    my $catalogue_number_1 = ComposerCat::Database::catalogue_number(1);
    print Dumper($catalogue_number_1) . "\n";

    my $catalogue_numbers = ComposerCat::Database::list_catalogue_numbers();
    print scalar @$catalogue_numbers . "\n";
    foreach my $catalogue_number (@$catalogue_numbers) {
	print $catalogue_number->{number} . "\n";
    }
}

sub test_schema_statements {
    make_dbh;

    print "============================================\n";
    print "works #55:\n";
    my $work = ComposerCat::Database::complete_work(55);
    print Dumper($work) . "\n\n";
    print "============================================\n";

    print "============================================\n";
    print "works #56:\n";
    my $work = ComposerCat::Database::complete_work(56);
    print Dumper($work) . "\n\n";
    print "============================================\n";

    print "============================================\n";
    print "works #57:\n";
    my $work = ComposerCat::Database::complete_work(57);
    print Dumper($work) . "\n\n";
    print "============================================\n";

    print "============================================\n";
    print "archives #1:\n";
    my $work = ComposerCat::Database::complete_archive(1);
    print Dumper($work) . "\n\n";
    print "============================================\n";

    print "============================================\n";
    print "archives #2:\n";
    my $work = ComposerCat::Database::complete_archive(2);
    print Dumper($work) . "\n\n";
    print "============================================\n";

    print "============================================\n";
    print "archives #3:\n";
    my $work = ComposerCat::Database::complete_archive(3);
    print Dumper($work) . "\n\n";
    print "============================================\n";

    print "============================================\n";
    print "period 1925:\n";
    my $period = ComposerCat::Database::complete_period(1925);
    print Dumper($period) . "\n\n";
    print "============================================\n";

    print "============================================\n";
    print "period 1928:\n";
    my $period = ComposerCat::Database::complete_period(1928);
    print Dumper($period) . "\n\n";
    print "============================================\n";

    print "============================================\n";
    print "period 1931:\n";
    my $period = ComposerCat::Database::complete_period(1931);
    print Dumper($period) . "\n\n";
    print "============================================\n";
}

sub test_schema_statement {
    make_dbh;

    my ($table, $st_name) = (shift, shift);
    print "============================================\n";
    print "$table.$st_name:\n";
    my $st = ComposerCat::Database::table_info($table)->{$st_name};
    $st->execute(@_);
    print Dumper($st->fetchall_arrayref);
    print "============================================\n";
}

sub test_all_records {
    print Dumper(all_records);
}

sub test_dbpedia_url {
    print dbpedia_uri("clarinet") . "\n";
}

sub test_insert_resource {
    make_dbh;
    insert_resource("insert", "works",
		    {ID => 139, uniform_title => "Ivan the Terrible"},
		    {uri => 'http://en.wikipedia.org/wiki/Ivan_the_Terrible_(Prokofiev)', mime_type => 'text/html'});
    insert_resource("insert", "works",
		    {ID => 44, uniform_title => "The Fiery Angel"},
		    {uri => 'http://en.wikipedia.org/wiki/The_Fiery_Angel_(opera)', mime_type => 'text/html'});
}

sub test_auto_resource_inserter {
    make_dbh;
    insert_record("instruments", {instrument => "xylophone"});
}

sub test_make_api_function {
    my $TEMPLATES_DIR = "/path/to/composercat/web/public/";

    my $browse_works_by_instrumentation = make_api_function(
	{ uri_pattern         => qr/^\/works\/?$/,

	  required_parameters => [qw(scored_for)],
	  optional_parameters => [qw(accept)],
	  accept_types        => ['text/html', 'text/xml', 'application/rdf+xml'],

	  generator           => {type => 'proc',
				  proc => sub {
				      my ($req, $apr_req, $dbh, $url_args) = @_;
			     
				      my $st = ComposerCat::Database::table_info('works')->{_list_by_scored_for};
				      $st->execute($apr_req->param("scored_for"));
				      my $works = [];
				      while (my $work = $st->fetchrow_hashref) {
					  push @$works, $work;
				      }
			     
				      return $works;
				  },
				  rootname   => 'works',
				  recordname => 'work'},

	  transforms          => {'text/html' => [$TEMPLATES_DIR . 'browse-works2html.xsl'],
				  'application/rdf+xml' => [$TEMPLATES_DIR . 'browse-works2rdf.xsl']} });

    my $view_work = make_api_function(
	{ uri_pattern => qr/^\/works\/(?<work_id>[0-9]+)\/?$/,

	  optional_parameters => [qw(accept)],
	  accept_types        => ['text/html', 'text/xml', 'application/rdf+xml'],

	  generator           => {type     => 'proc',
				  proc     => sub {
				      my ($req, $apr_req, $dbh, $url_args) = @_;
				      return ComposerCat::Database::complete_work(int($url_args->{work_id}));
				  },
				  rootname => 'work'},
	  transforms          => {'text/html'           => [$TEMPLATES_DIR . 'work2html.xsl'],
				  'application/rdf+xml' => [$TEMPLATES_DIR . 'work2rdf.xsl']} });

    &{ $browse_works_by_instrumentation->{handle} }();
}

sub test_sax_machines_xslt {
    use XML::SAX::Machines qw(Pipeline);
    use XML::Filter::XSLT;
    use XML::Generator::PerlData;
    use XML::SAX::Writer;
    use Data::Dumper;

    # sub XML::Filter::XSLT::LibXSLT::set_handler {
    # 	my $self = shift;
    # 	$self->{Handler} = shift;
    # 	$self->{Parser}->set_handler( $self->{Handler} )
    # 	    if $self->{Parser};
    # }

    my $TEMPLATES_DIR = "/path/to/composercat/web/public/";

    #my $xslt_filt = XML::Filter::XSLT->new( Source => { SystemId => $TEMPLATES_DIR . 'work2html.xsl' } );
    #$xslt_filt->set_stylesheet_uri($TEMPLATES_DIR . 'work2html.xsl');

    my $p = Pipeline(XML::Filter::XSLT->new( Source => { SystemId => $TEMPLATES_DIR . 'work2html.xsl' } ), XML::SAX::Writer->new( Output => \*STDOUT ));
    #my $p = Pipeline(XML::Filter::XSLT->new( Source => { String => '<?xml version="1.0" encoding="utf-8" ?><xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0"><xsl:output method="html" /><xsl:template match="/"><xsl:apply-templates /></xsl:template></xsl:stylesheet>' } ), XML::SAX::Writer->new( Output => \*STDOUT ));

    print Dumper($p->parts);

    ComposerCat::Database::make_dbh;
    my $work = ComposerCat::Database::complete_work(59);
    #my $work = {ID => 59, title => 'Hello'};

    my $g = XML::Generator::PerlData->new(Handler => $p, rootname => 'work');
    #my $g = XML::Generator::PerlData->new(Handler => $p);
    #print Dumper($g->parse({work => $work}));
    $g->parse({work => $work});
    #print $g->parse({work => $work});
    print "\n";
}

sub test_markup_filter {
    my $filter = ComposerCat::Database::MarkupFilter->new;
    $filter->parse_markup(q|Hello '''world!''' [http://www.foo.com/ click ''here'']|);
}

sub test_process_all_pages {
    ComposerCat::Search::process_all_pages(sub { print $_[0]->{url} . "\n" . $_[0]->{content} . "\n"; });
}

sub test_lilypond_renderer {
    open OUT, "foo.png";
    render {mime_type => 'application/x-lilypond', data => q!\header { tagline = ##f } { g1 | e1 | c2. c'4 | g4 c g e | c4 r r2 | }!}, \*STDOUT;
}

sub main {
    #test_create_workbook;
    #test_ingest_workbook;
    #test_editor_front_page;
    #test_handler;
    #test_database_autoloader;
    #test_all_records;
    #test_dbpedia_url;
    #test_insert_resource;
    #test_auto_resource_inserter;
    test_schema_statements;
    #test_make_api_function;
    #test_sax_machines_xslt;
    #test_schema_statement 'works', '_list_by_scored_for', 'clarinet';
    #test_markup_filter;
    #test_process_all_pages;

    test_schema_statement 'archives', '_manuscripts', '1';
    test_schema_statement 'archives', '_manuscripts', '2';
    test_schema_statement 'archives', '_manuscripts', '3';

}

main;
